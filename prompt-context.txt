# Project Context Documentation

## Project Overview
- Modern React Native application with navigation, state management, and a sophisticated UI
- Uses JavaScript (.jsx files) with NativeWind for styling
- Implements a bottom tab navigation system with icon-based navigation
- Features a multi-step meal ordering system with dedicated state management

## Current Implementation Status

### 1. Project Structure
```
src/
├── components/
│   └── meal-order/
│       ├── DetailStep.jsx      # First step of meal order form
│       ├── PemesanStep.jsx     # Second step for customer details
│       ├── MenuStep.jsx        # Third step for menu selection
│       ├── SummaryStep.jsx     # Final step showing order summary
│       └── StepIndicatorStyle.js # Styling for step indicator
├── navigation/
│   ├── StackNavigator.jsx      # Main stack navigation configuration
│   └── TabNavigator.jsx        # Bottom tab navigation configuration
├── screens/
│   ├── HomeScreen.jsx          # Main landing screen
│   ├── MealOrderScreen.jsx     # Meal order flow container
│   ├── MealOrderSuccess.jsx    # Success screen after order
│   ├── OrderScreen.jsx         # Orders list/history screen
│   ├── NotificationScreen.jsx  # Notifications screen
│   └── ProfileScreen.jsx       # User profile screen
├── store/
│   ├── mealOrderStore.js       # Dedicated state for meal orders
│   └── useStore.js            # Global state management
└── theme/
    └── theme.js               # Theme configuration
```

### 2. Dependencies
```json
{
  "@expo/vector-icons": "^14.0.4",
  "@gorhom/bottom-sheet": "^4.6.3",
  "@react-native-masked-view/masked-view": "^0.3.2",
  "@react-navigation/bottom-tabs": "^7.2.0",
  "@react-navigation/native": "^7.0.14",
  "@react-navigation/native-stack": "^7.2.0",
  "react-native-step-indicator": "^1.0.3",
  "axios": "^1.7.9",
  "expo": "52",
  "expo-status-bar": "~2.0.1",
  "nativewind": "^2.0.11",
  "react": "18.3.1",
  "react-native": "0.76.7",
  "react-native-gesture-handler": "~2.20.2",
  "react-native-reanimated": "~3.16.1",
  "react-native-safe-area-context": "^5.2.0",
  "react-native-screens": "^4.6.0",
  "zustand": "^5.0.3"
}
```

### 3. Implemented Features

#### Navigation
- Stack Navigation using @react-navigation/native-stack
  - MainTabs screen (contains bottom tabs)
  - MealOrder screen with success state
- Bottom tab navigation with 4 tabs:
  - Home
  - Order
  - Notification
  - Profile
- Icon-based navigation using MaterialCommunityIcons
- Icons change color when active/inactive
- Custom header styling for stack navigation

#### MealOrder System
- Main Order Screen (MealOrderScreen.jsx):
  - Implements multi-step form using react-native-step-indicator
  - Four distinct steps with dedicated components:
    1. DetailStep: Initial order details
    2. PemesanStep: Customer information
    3. MenuStep: Food/beverage selection
    4. SummaryStep: Order review and confirmation
  - Custom styled step indicator with progress tracking
  - Step-specific validation
  - Persistent state management using mealOrderStore
  - Inter-step data preservation

- Order Components:
  - DetailStep.jsx: Handles basic order parameters
  - PemesanStep.jsx: Captures customer details
  - MenuStep.jsx: Menu selection interface
  - SummaryStep.jsx: Order review and confirmation
  - StepIndicatorStyle.js: Custom styling for progress indicator

- Success Screen (MealOrderSuccess.jsx):
  - Animated success confirmation
  - Order summary display
  - Navigation options:
    - Share order details
    - Return to home screen
    - View order history

#### State Management
- Global store using Zustand (useStore.js)
  - Manages app-wide state
  - Handles service request counts
  - User preferences and settings

- Dedicated meal order state (mealOrderStore.js)
  - Manages complete order flow state
  - Handles step validation
  - Preserves form data between steps
  - Manages order submission process

#### Theme System
- Comprehensive theme configuration in theme.js
- NativeWind integration for consistent styling
- Responsive design patterns
- Custom component styling

### 4. UI Components

#### Service Menu Items
- Circular icons with labels
- Equal width distribution (flex-1)
- Blue accent colors with shadows
- Centered layout in a single row

#### Form Components
- Step indicator with custom styling
- Validated input fields
- Custom select components
- Quantity adjusters
- Summary cards with order details

### 5. Current Status
- Complete navigation system implementation
- Fully functional meal ordering system with:
  - Multi-step form implementation
  - State persistence
  - Step validation
  - Success handling
- Implemented screens:
  - Home with service menu
  - Meal order flow
  - Success screen
  - Base screens for other tabs
- Comprehensive state management:
  - Global state
  - Dedicated meal order state
  - Navigation state handling

### 6. Next Steps (Potential)
- Implement remaining service flows (Transport, Rooms, Stationary)
- Add data persistence layer
- Implement API integration
- Add user authentication
- Enhance form validation
- Add offline support
- Implement push notifications

### 7. Notes for Future Development
- Follow established component structure
- Utilize mealOrderStore.js pattern for new services
- Maintain consistent styling with NativeWind
- Follow existing validation patterns
- Implement error boundaries
- Consider adding unit tests

## Extra Notes
This project implements a sophisticated service management system with a focus on meal ordering. The architecture emphasizes maintainability, scalability, and user experience, following React Native best practices. The meal ordering system serves as a template for implementing additional services.
